//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rolex {
    using System.CodeDom;
    using System.Reflection;
    
    internal partial class Deslanged {
        private static CodeCompileUnit _CompileUnit(string[] referencedAssemblies, CodeNamespace[] namespaces, CodeAttributeDeclaration[] assemblyCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives) {
            CodeCompileUnit result = new CodeCompileUnit();
            result.ReferencedAssemblies.AddRange(referencedAssemblies);
            result.Namespaces.AddRange(namespaces);
            result.AssemblyCustomAttributes.AddRange(assemblyCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            return result;
        }
        private static CodeNamespace _Namespace(string name, CodeNamespaceImport[] imports, CodeTypeDeclaration[] types, CodeCommentStatement[] comments) {
            CodeNamespace result = new CodeNamespace();
            result.Name = name;
            result.Imports.AddRange(imports);
            result.Types.AddRange(types);
            result.Comments.AddRange(comments);
            return result;
        }
        private static CodeTypeDeclaration _TypeDeclaration(
                    string name, 
                    bool isClass, 
                    bool isEnum, 
                    bool isInterface, 
                    bool isStruct, 
                    bool isPartial, 
                    MemberAttributes attributes, 
                    TypeAttributes typeAttributes, 
                    CodeTypeParameter[] typeParameters, 
                    CodeTypeReference[] baseTypes, 
                    CodeTypeMember[] members, 
                    CodeCommentStatement[] comments, 
                    CodeAttributeDeclaration[] customAttributes, 
                    CodeDirective[] startDirectives, 
                    CodeDirective[] endDirectives, 
                    CodeLinePragma linePragma) {
            CodeTypeDeclaration result = new CodeTypeDeclaration(name);
            result.IsClass = isClass;
            result.IsEnum = isEnum;
            result.IsInterface = isInterface;
            result.IsStruct = isStruct;
            result.IsPartial = isPartial;
            result.Attributes = attributes;
            result.TypeAttributes = typeAttributes;
            result.TypeParameters.AddRange(typeParameters);
            result.BaseTypes.AddRange(baseTypes);
            result.Members.AddRange(members);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberField _MemberField(CodeTypeReference type, string name, CodeExpression initExpression, MemberAttributes attributes, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberField result = new CodeMemberField(type, name);
            result.InitExpression = initExpression;
            result.Attributes = attributes;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeConstructor _Constructor(MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeExpression[] chainedConstructorArgs, CodeExpression[] baseConstructorArgs, CodeStatement[] statements, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeConstructor result = new CodeConstructor();
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.ChainedConstructorArgs.AddRange(chainedConstructorArgs);
            result.BaseConstructorArgs.AddRange(baseConstructorArgs);
            result.Statements.AddRange(statements);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberProperty _MemberProperty(CodeTypeReference type, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] getStatements, CodeStatement[] setStatements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberProperty result = new CodeMemberProperty();
            result.Type = type;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.GetStatements.AddRange(getStatements);
            result.SetStatements.AddRange(setStatements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberMethod _MemberMethod(CodeTypeReference returnType, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] statements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeAttributeDeclaration[] returnTypeCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberMethod result = new CodeMemberMethod();
            result.ReturnType = returnType;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.Statements.AddRange(statements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.ReturnTypeCustomAttributes.AddRange(returnTypeCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        public static System.CodeDom.CodeCompileUnit TableTokenizer {
            get {
                return Deslanged._CompileUnit(new string[] {
                            "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"}, new CodeNamespace[] {
                            Deslanged._Namespace("", new CodeNamespaceImport[] {
                                        new CodeNamespaceImport("System"),
                                        new CodeNamespaceImport("System.IO"),
                                        new CodeNamespaceImport("System.Collections.Generic"),
                                        new CodeNamespaceImport("System.Text")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                            Deslanged._Namespace("Rolex", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                        Deslanged._TypeDeclaration("TextReaderEnumerator", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference(typeof(object)),
                                                    new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference(typeof(char))})}, new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_state", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(char)), "_current", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("TextReader"), "_reader", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor(MemberAttributes.FamilyAndAssembly, new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("TextReader"), "reader")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_reader"), new CodeArgumentReferenceExpression("reader")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-1))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(char)), "Current", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The enumerator was disposed")}))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), CodeBinaryOperatorType.BooleanOr, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-2))), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The enumerator is not positioned on an element.")}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"))}, new CodeStatement[0], new CodeTypeReference[] {
                                                                new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference(typeof(char))})}, null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Gets the current character under the cursor", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <exception cref=\"ObjectDisposedException\">The enumerator is disposed</exception>" +
                                                                        "", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(object)), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(null)}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-3))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Disposes of the enumerator", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Dispose"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference("IDisposable"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "MoveNext", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The enumerator was disposed")}))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-2)), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_reader"), "Read"), new CodeExpression[0])),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-2)),
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(0)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Convert))), "ToChar"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("i")})),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Moves to the next element", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <returns>True if successful, false if no more data</returns>", true),
                                                                new CodeCommentStatement(" <exception cref=\"ObjectDisposedException\">The enumerator was disposed</exception" +
                                                                        ">", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "MoveNext", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "MoveNext"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The enumerator was disposed")}))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(null)}, new CodeStatement[0]),
                                                                new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("NotSupportedException"), new CodeExpression[0]))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Resets the enumerator", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <remarks>Not supported</remarks>", true),
                                                                new CodeCommentStatement(" <exception cref=\"ObjectDisposedException\">The enumerator is disposed</exception>" +
                                                                        "", true),
                                                                new CodeCommentStatement(" <exception cref=\"NotSupportedException\">The operation is not supported (always t" +
                                                                        "hrows)</exception>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Reset"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._TypeDeclaration("TextReaderEnumerable", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference("Object"),
                                                    new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                new CodeTypeReference(typeof(char))})}, new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference("TextReader"), "_reader", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_state", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("TextReader"), "reader")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_reader"), new CodeArgumentReferenceExpression("reader")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-1))}, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Creates a new instance", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <param name=\"reader\">The TextReader</param>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference(typeof(char))}), "GetEnumerator", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1))), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The collection cannot be enumerated more than once.")}))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("TextReaderEnumerator"), "result", new CodeObjectCreateExpression(new CodeTypeReference("TextReaderEnumerator"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_reader")})),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(0)),
                                                                new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeTypeReference[] {
                                                                new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference(typeof(char))})}, null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Gets the enumerator", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <remarks>This can only be called once</remarks>", true),
                                                                new CodeCommentStatement(" <returns>A new enumerator</returns>", true),
                                                                new CodeCommentStatement(" <exception cref=\"InvalidOperationException\">The operation cannot be done more th" +
                                                                        "an once</exception>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(System.Collections.IEnumerator)), "GetEnumerator", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "GetEnumerator"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerable)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" <summary>", true),
                                                    new CodeCommentStatement(" Gets an enumerable instance over a TextReader", true),
                                                    new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._TypeDeclaration("TableTokenizer", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference(typeof(object)),
                                                    new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("Token")})}, new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "ErrorSymbol", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Public), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" The symbol id for an error", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "_dfaTable", null, MemberAttributes.Private, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" our state table")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "_blockEnds", null, MemberAttributes.Private, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" our block ends (specified like comment<blockEnd=\"*/\">=\"/*\" in a rolex spec file)" +
                                                                        "")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "_nodeFlags", null, MemberAttributes.Private, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" our node flags. Currently only used for the hidden attribute")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference(typeof(char))}), "_input", null, MemberAttributes.Private, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" the input cursor. We can get this from a string, a char array, or some other sou" +
                                                                        "rce.")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_tabWidth", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "TabWidth", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"))}, new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"), CodeBinaryOperatorType.LessThanOrEqual, new CodePrimitiveExpression(0)), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"), new CodePrimitiveExpression(4))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"), new CodePropertySetValueReferenceExpression())}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the width of a tab stop", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference("Token")}), "GetEnumerator", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("TableTokenizerEnumerator"), "result", new CodeObjectCreateExpression(new CodeTypeReference("TableTokenizerEnumerator"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfaTable"),
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"),
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"),
                                                                                new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "GetEnumerator"), new CodeExpression[0])})),
                                                                new CodeAssignStatement(new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("result"), "TabWidth"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth")),
                                                                new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeTypeReference[] {
                                                                new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("Token")})}, null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Retrieves an enumerator that can be used to iterate over the tokens", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <returns>An enumerator that can be used to iterate over the tokens</returns>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(System.Collections.IEnumerator)), "GetEnumerator", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "GetEnumerator"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerable)), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" legacy collection support (required)")}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "dfaTable"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "blockEnds"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "nodeFlags"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference(typeof(char))}), "input")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeArgumentReferenceExpression("dfaTable")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentNullException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("dfaTable")}))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeArgumentReferenceExpression("blockEnds")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentNullException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("blockEnds")}))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeArgumentReferenceExpression("nodeFlags")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentNullException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("nodeFlags")}))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityEquality, new CodeArgumentReferenceExpression("input")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentNullException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("input")}))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfaTable"), new CodeArgumentReferenceExpression("dfaTable")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeArgumentReferenceExpression("blockEnds")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"), new CodeArgumentReferenceExpression("nodeFlags")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), new CodeArgumentReferenceExpression("input"))}, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Constructs a new instance", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <param name=\"dfaTable\">The DFA state table to use</param>", true),
                                                                new CodeCommentStatement(" <param name=\"blockEnds\">The block ends table</param>", true),
                                                                new CodeCommentStatement(" <param name=\"nodeFlags\">The node flags table</param>", true),
                                                                new CodeCommentStatement(" <param name=\"input\">The input character sequence</param>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" <summary>", true),
                                                    new CodeCommentStatement(" Reference Implementation for generated shared code", true),
                                                    new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._TypeDeclaration("TableTokenizerEnumerator", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference(typeof(object)),
                                                    new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("Token")})}, new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_state", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("Token"), "_token", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_ch", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "_dfa", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "_blockEnds", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "_nodeFlags", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(long)), "_position", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(long)), "_absIndex", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_line", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_column", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_tabWidth", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("StringBuilder"), "_capture", new CodeObjectCreateExpression(new CodeTypeReference("StringBuilder"), new CodeExpression[0]), MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference(typeof(char))}), "_inner", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "dfa"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "blockEnds"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "nodeFlags"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference(typeof(char))}), "inner")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodePrimitiveExpression(0)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodePrimitiveExpression(1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_absIndex"), new CodePrimitiveExpression(0)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeArgumentReferenceExpression("dfa")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeArgumentReferenceExpression("blockEnds")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"), new CodeArgumentReferenceExpression("nodeFlags")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), new CodeArgumentReferenceExpression("inner")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), new CodePrimitiveExpression(-2)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "SymbolId"), new CodePrimitiveExpression(-2)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"), new CodePrimitiveExpression(4))}, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Constructs a new token enumerator", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <param name=\"dfa\">The DFA to use</param>", true),
                                                                new CodeCommentStatement(" <param name=\"blockEnds\">The block end DFAs to use</param>", true),
                                                                new CodeCommentStatement(" <param name=\"nodeFlags\">The node flags</param>", true),
                                                                new CodeCommentStatement(" <param name=\"inner\">The character enumerator</param>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "TabWidth", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"))}, new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePropertySetValueReferenceExpression(), CodeBinaryOperatorType.LessThanOrEqual, new CodePrimitiveExpression(0)), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"), new CodePrimitiveExpression(4))}, new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"), new CodePropertySetValueReferenceExpression())})}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the width of the tab stops", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference("Token"), "Current", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The enumerator was disposed")}))}, new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-2)), CodeBinaryOperatorType.BooleanOr, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1))), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The enumerator is not positioned on an element")}))}, new CodeStatement[0])}),
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"))}, new CodeStatement[0], new CodeTypeReference[] {
                                                                new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("Token")})}, null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the current token", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(object)), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" legacy support")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Dispose"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.IDisposable)), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" framework support")}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(null)}, new CodeStatement[0]),
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Dispose"), new CodeExpression[0])),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-3))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Disposes of the enumerator", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "_FetchNextInput", MemberAttributes.Private, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "MoveNext"), new CodeExpression[0])), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), new CodePrimitiveExpression(-1)),
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch1", new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Current")),
                                                                new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "IsHighSurrogate"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("ch1")}), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "MoveNext"), new CodeExpression[0])), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("IOException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The stream is not valid Unicode")}))}, new CodeStatement[0]),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch2", new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_inner"), "Current")),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "IsLowSurrogate"), new CodeExpression[] {
                                                                                                new CodeVariableReferenceExpression("ch2")})), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("IOException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The stream is not valid Unicode")}))}, new CodeStatement[0]),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_absIndex"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_absIndex"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertToUtf32"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("ch1"),
                                                                                            new CodeVariableReferenceExpression("ch2")}))}, new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch1"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression('\r')), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1))}, new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch1"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression('\n')), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1))}, new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch1"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression('\t')), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1)), CodeBinaryOperatorType.Divide, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth")), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)), CodeBinaryOperatorType.Multiply, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth")), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))})})}),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Convert))), "ToInt32"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("ch1")}))}),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_absIndex"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_absIndex"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "MoveNext", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "MoveNext"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" supports the framework")}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "MoveNext", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The enumerator was disposed")}))}, new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(0))}, new CodeStatement[0])}),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(0)), new CodeStatement[] {
                                                                            new CodeIterationStatement(new CodeSnippetStatement(""), new CodePrimitiveExpression(true), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-2)),
                                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Lex"), new CodeExpression[0])),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "SymbolId"), CodeBinaryOperatorType.GreaterThan, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"), new CodeExpression[] {
                                                                                                                            new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "SymbolId")}), CodeBinaryOperatorType.BitwiseAnd, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0])}, new CodeStatement[] {
                                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(true))})})}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Moves to the next token", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <returns>True if successful, or false if there were not any more tokens</returns" +
                                                                        ">", true),
                                                                new CodeCommentStatement(" <exception cref=\"ObjectDisposedException\">Thrown if the cobject was disposed of<" +
                                                                        "/exception>", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Reset"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" supports the framework")}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The enumerator was disposed")}))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), new CodePrimitiveExpression(-2)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodePrimitiveExpression(0)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_absIndex"), new CodePrimitiveExpression(0)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodePrimitiveExpression(1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "SymbolId"), new CodePrimitiveExpression(-2))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Resets the enumerator", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <exception cref=\"ObjectDisposedException\">The enumerator was disposed</exception" +
                                                                        ">", true)}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(long)), "AbsoluteIndex", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The enumerator was disposed")}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_absIndex"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the absolute character index of the cursor", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(long)), "Position", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The enumerator was disposed")}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the position of the cursor", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Line", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The enumerator was disposed")}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the line of the cursor", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberProperty(new CodeTypeReference(typeof(int)), "Column", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the column of the cursor", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "_Lex", MemberAttributes.Private, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "tlen", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "tto", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "prlen", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "pmin", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "pmax", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "j", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "state", new CodePrimitiveExpression(0)),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "acc", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(long)), "cursor_pos", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position")),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "line", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line")),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "column", null),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_absIndex"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(0)), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("column"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"))}, new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1)))}),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(long)), "absi", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_absIndex")),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-2)), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_FetchNextInput"), new CodeExpression[0])),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-2)),
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0])}, new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-2)),
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0])}),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Position"), new CodeVariableReferenceExpression("cursor_pos")),
                                                                new CodeLabeledStatement("start_dfa", new CodeSnippetStatement("")),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("acc"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("state")})),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("tlen"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("state")})),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("tlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("tto"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("state")})),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("prlen"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("state")})),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("prlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("pmin"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("pmax"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("pmin")), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("prlen"), CodeBinaryOperatorType.Subtract, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), CodeBinaryOperatorType.Multiply, new CodePrimitiveExpression(2)))),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeVariableReferenceExpression("prlen"))}, new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("pmax")), new CodeStatement[] {
                                                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Append"), new CodeExpression[] {
                                                                                                                                new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertFromUtf32"), new CodeExpression[] {
                                                                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch")})})),
                                                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_FetchNextInput"), new CodeExpression[0])),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeVariableReferenceExpression("tto")),
                                                                                                                new CodeGotoStatement("start_dfa")}, new CodeStatement[0])})})}),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("acc"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1))), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "sym", new CodeVariableReferenceExpression("acc")),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "be", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("acc")})),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("be"), CodeBinaryOperatorType.IdentityInequality, new CodePrimitiveExpression(null)), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodePrimitiveExpression(0)),
                                                                                        new CodeLabeledStatement("start_be_dfa", new CodeSnippetStatement("")),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("acc"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("tlen"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("tlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("tto"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("state")})),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("prlen"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("state")})),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("prlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("pmin"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("state")})),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("pmax"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("state")})),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("pmin")), new CodeStatement[] {
                                                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("prlen"), CodeBinaryOperatorType.Subtract, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), CodeBinaryOperatorType.Multiply, new CodePrimitiveExpression(2)))),
                                                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeVariableReferenceExpression("prlen"))}, new CodeStatement[] {
                                                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("pmax")), new CodeStatement[] {
                                                                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Append"), new CodeExpression[] {
                                                                                                                                                        new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertFromUtf32"), new CodeExpression[] {
                                                                                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch")})})),
                                                                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_FetchNextInput"), new CodeExpression[0])),
                                                                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeVariableReferenceExpression("tto")),
                                                                                                                                        new CodeGotoStatement("start_be_dfa")}, new CodeStatement[0])})})}),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("acc"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1))), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "SymbolId"), new CodeVariableReferenceExpression("sym")),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Value"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "ToString"), new CodeExpression[0])),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "AbsoluteIndex"), new CodeVariableReferenceExpression("absi")),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Position"), new CodeVariableReferenceExpression("cursor_pos")),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Line"), new CodeVariableReferenceExpression("line")),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Column"), new CodeVariableReferenceExpression("column")),
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Clear"), new CodeExpression[0])),
                                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "SymbolId"), new CodePrimitiveExpression(-1)),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Value"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "ToString"), new CodeExpression[0])),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "AbsoluteIndex"), new CodeVariableReferenceExpression("absi")),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Position"), new CodeVariableReferenceExpression("cursor_pos")),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Line"), new CodeVariableReferenceExpression("line")),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Column"), new CodeVariableReferenceExpression("column")),
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Clear"), new CodeExpression[0])),
                                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Append"), new CodeExpression[] {
                                                                                                        new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertFromUtf32"), new CodeExpression[] {
                                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch")})})),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_FetchNextInput"), new CodeExpression[0])),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodePrimitiveExpression(0)),
                                                                                        new CodeGotoStatement("start_be_dfa")}, new CodeStatement[0]),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "SymbolId"), new CodeVariableReferenceExpression("acc")),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Value"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "ToString"), new CodeExpression[0])),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "AbsoluteIndex"), new CodeVariableReferenceExpression("absi")),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Position"), new CodeVariableReferenceExpression("cursor_pos")),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Line"), new CodeVariableReferenceExpression("line")),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Column"), new CodeVariableReferenceExpression("column")),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Clear"), new CodeExpression[0])),
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(bool)), "fetch", new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Length"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(0))),
                                                                new CodeConditionStatement(new CodeVariableReferenceExpression("fetch"), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Append"), new CodeExpression[] {
                                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertFromUtf32"), new CodeExpression[] {
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch")})}))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "SymbolId"), new CodePrimitiveExpression(-1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Value"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "ToString"), new CodeExpression[0])),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "AbsoluteIndex"), new CodeVariableReferenceExpression("absi")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Position"), new CodeVariableReferenceExpression("cursor_pos")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Line"), new CodeVariableReferenceExpression("line")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_token"), "Column"), new CodeVariableReferenceExpression("column")),
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Clear"), new CodeExpression[0])),
                                                                new CodeConditionStatement(new CodeVariableReferenceExpression("fetch"), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_FetchNextInput"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" <summary>", true),
                                                    new CodeCommentStatement(" Enumerates tokens over a character enumerator", true),
                                                    new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
        public static System.CodeDom.CodeCompileUnit TableTokenizerTemplate {
            get {
                return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                            Deslanged._Namespace("", new CodeNamespaceImport[] {
                                        new CodeNamespaceImport("System.IO"),
                                        new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                            Deslanged._Namespace("Rolex", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                        Deslanged._TypeDeclaration("TableTokenizerTemplate", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference("TableTokenizer")}, new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "DfaTable", null, (MemberAttributes.Static | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "NodeFlags", null, (MemberAttributes.Static | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "BlockEnds", null, (MemberAttributes.Static | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference(typeof(char))}), "input")}, new CodeExpression[0], new CodeExpression[] {
                                                                new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerTemplate")), "DfaTable"),
                                                                new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerTemplate")), "BlockEnds"),
                                                                new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerTemplate")), "NodeFlags"),
                                                                new CodeArgumentReferenceExpression("input")}, new CodeStatement[0], new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Constructs a new table tokenizer", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <param name=\"input\">The input character stream</param>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("TextReader"), "input")}, new CodeExpression[0], new CodeExpression[] {
                                                                new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerTemplate")), "DfaTable"),
                                                                new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerTemplate")), "BlockEnds"),
                                                                new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Rolex.TableTokenizerTemplate")), "NodeFlags"),
                                                                new CodeObjectCreateExpression(new CodeTypeReference("TextReaderEnumerable"), new CodeExpression[] {
                                                                            new CodeArgumentReferenceExpression("input")})}, new CodeStatement[0], new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Constructs a new table tokenizer", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <param name=\"input\">The input character stream</param>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" <summary>", true),
                                                    new CodeCommentStatement(" A table driven tokenizer", true),
                                                    new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
        public static System.CodeDom.CodeCompileUnit Token {
            get {
                return Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                            Deslanged._Namespace("", new CodeNamespaceImport[0], new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                            Deslanged._Namespace("Rolex", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                        Deslanged._TypeDeclaration("Token", false, false, false, true, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Line", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the line where the token occurs", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Column", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the column where the token occurs", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(long)), "AbsoluteIndex", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the character index where the token occurs", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(long)), "Position", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the position where the token occurs", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(int)), "SymbolId", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the symbol id or -1 for the error symbol", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    Deslanged._MemberField(new CodeTypeReference(typeof(string)), "Value", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the value of the token", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" <summary>", true),
                                                    new CodeCommentStatement(" Reference implementation for generated shared code", true),
                                                    new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
    }
}
